/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package py.com.cosmesoft.vtwfacturaspymes.view;

import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListSelectionModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import py.com.cosmesoft.vtwfacturaspymes.dto.ClienteModel;
import py.com.cosmesoft.vtwfacturaspymes.interfaces.Entidad;
import py.com.cosmesoft.vtwfacturaspymes.dto.MesaModel;
import py.com.cosmesoft.vtwfacturaspymes.dto.PedidoCabeceraModel;
import py.com.cosmesoft.vtwfacturaspymes.dto.VendedorModel;
import py.com.cosmesoft.vtwfacturaspymes.util.ApplicationConstant;
import py.com.cosmesoft.vtwfacturaspymes.client.ClienteClient;
import py.com.cosmesoft.vtwfacturaspymes.client.GenericClient;
import py.com.cosmesoft.vtwfacturaspymes.client.MesaClient;
import py.com.cosmesoft.vtwfacturaspymes.client.PedidosClient;
import py.com.cosmesoft.vtwfacturaspymes.client.VendedorClient;

/**
 *
 * @author usuario
 */
public class JFrameLista extends javax.swing.JFrame {

    /**
     * Creates new form JFrameLista
     */
    private Object object;

    private JFrameForm papa;
    private String tipo;

    public JFrameLista(JFrameForm papa, String tipo) {
        this.papa = papa;
        this.tipo = tipo;
        //this.papa.setEnabled(false);
        setSize(600, 600);
        setLocation(400, 100);
        ImageIcon img = new ImageIcon(ApplicationConstant.CARPETA_IMAGENES + "\\logoSantafe.png");
        setIconImage(img.getImage());
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        if(this.tipo.equals(ApplicationConstant.VEN)){
            jTable1.setModel(listarVendedores());
        }else if(this.tipo.equals(ApplicationConstant.CLI)){
            jTable1.setModel(listarClientes());
        }else if(this.tipo.equals(ApplicationConstant.MES)){
            jTable1.setModel(listarMesas());
        }else if(this.tipo.equals(ApplicationConstant.PED)){
            jTable1.setModel(listarPedidos());
        }
        /*Si queres que tenga boton descomentar esto*/
        //ButtonColumn buttonColumn = new ButtonColumn(this, jTable1, 0);
        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) {
                    try {
                        setObject(jTable1.getValueAt(jTable1.getSelectedRow(), 0));
                        dispose();
                    } catch (Exception e) {
                        e.printStackTrace();
                        dialogError("Ocurrio un error al elegir el vendedor.");
                    }
                }
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(87, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private DefaultTableModel listarVendedores() {
        String[] columnNames = {"Nombre", "Codigo"};
        DefaultTableModel model = new DefaultTableModel() {
            public boolean isCellEditable(int row, int column) {
                if (column == 0) {
                    return true;
                }
                return false;
            }
        };
        model.setColumnIdentifiers(columnNames);
        List<VendedorModel> objectList = new ArrayList<VendedorModel>();
        try {
            objectList = VendedorClient.recibirVendedores();
            //GenericClient<T> c = new GenericClient<T>(this.PATH);
            //objectList = c.recibirLista();
        } catch (Exception e) {
            e.printStackTrace();
            dialogError("Ocurrio una excepción al momento de traer los " + this.tipo);
        }
        Object[] o = new Object[2];
        for (VendedorModel t : objectList) {
            //o[0] = t;
            o[0] = t;
            o[1] = t.getCodVendedor();
            model.addRow(o);
        }

        return model;
    }

    private DefaultTableModel listarClientes() {
        String[] columnNames = {"Nombre", "Codigo"};
        DefaultTableModel model = new DefaultTableModel() {
            public boolean isCellEditable(int row, int column) {
                if (column == 0) {
                    return true;
                }
                return false;
            }
        };
        model.setColumnIdentifiers(columnNames);
        List<ClienteModel> objectList = new ArrayList<ClienteModel>();
        try {
            objectList = ClienteClient.recibirClientes();
            //GenericClient<T> c = new GenericClient<T>(this.PATH);
            //objectList = c.recibirLista();
        } catch (Exception e) {
            e.printStackTrace();
            dialogError("Ocurrio una excepción al momento de traer los " + this.tipo);
        }
        Object[] o = new Object[2];
        for (ClienteModel t : objectList) {
            //o[0] = t;
            o[0] = t;
            o[1] = t.getCodigo();
            model.addRow(o);
        }
        //jTable1.setModel(model);
        //SET CUSTOM RENDERER TO TEAMS COLUMN
        //jTable1.getColumnModel().getColumn(0).setCellRenderer(new ButtonRenderer());
        //SET CUSTOM EDITOR TO TEAMS COLUMN
        //jTable1.getColumnModel().getColumn(0).setCellEditor(new ButtonEditor(new JTextField()));
        //ButtonColumn buttonColumn = new ButtonColumn(this, jTable1, 0);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.setSelectionModel(new ForcedListSelectionModel());

        return model;
    }

    private DefaultTableModel listarMesas() {
        String[] columnNames = {"Nombre", "Codigo"};
        DefaultTableModel model = new DefaultTableModel() {
            public boolean isCellEditable(int row, int column) {
                if (column == 0) {
                    return true;
                }
                return false;
            }
        };
        model.setColumnIdentifiers(columnNames);
        List<MesaModel> objectList = new ArrayList<MesaModel>();
        try {
            objectList = MesaClient.recibirMesas();
            //GenericClient<T> c = new GenericClient<T>(this.PATH);
            //objectList = c.recibirLista();
        } catch (Exception e) {
            e.printStackTrace();
            dialogError("Ocurrio una excepción al momento de traer los " + this.tipo);
        }
        Object[] o = new Object[2];
        for (MesaModel t : objectList) {
            //o[0] = t;
            o[0] = t;
            o[1] = t.getCodigo();
            model.addRow(o);
        }
        //jTable1.setModel(model);
        //SET CUSTOM RENDERER TO TEAMS COLUMN
        //jTable1.getColumnModel().getColumn(0).setCellRenderer(new ButtonRenderer());
        //SET CUSTOM EDITOR TO TEAMS COLUMN
        //jTable1.getColumnModel().getColumn(0).setCellEditor(new ButtonEditor(new JTextField()));
        //ButtonColumn buttonColumn = new ButtonColumn(this, jTable1, 0);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.setSelectionModel(new ForcedListSelectionModel());

        return model;
    }

    private DefaultTableModel listarPedidos() {
        String[] columnNames = {"Numero", "Serie", "Fecha", "Nro. Ref.", "Cliente", "Total", "Mesa"};
        DefaultTableModel model = new DefaultTableModel() {
            public boolean isCellEditable(int row, int column) {
                if (column == 0) {
                    return true;
                }
                return false;
            }
        };
        model.setColumnIdentifiers(columnNames);
        List<PedidoCabeceraModel> objectList = new ArrayList<PedidoCabeceraModel>();
        try {
            objectList = PedidosClient.recibirPedidos();
            //GenericClient<T> c = new GenericClient<T>(this.PATH);
            //objectList = c.recibirLista();
        } catch (Exception e) {
            e.printStackTrace();
            dialogError("Ocurrio una excepción al momento de traer los " + this.tipo);
        }
        Object[] o = new Object[7];
        for (PedidoCabeceraModel t : objectList) {
            o[0] = t;
            o[1] = t.getSerieComprobante();
            o[2] = t.getFecha();
            o[3] = t.getNroAutorizacion();
            o[4] = t.getNombreVendedor();
            o[5] = t.getTotalComprobate();
            o[6] = t.getCodMesa();
            model.addRow(o);
        }
        //jTable1.setModel(model);
        //SET CUSTOM RENDERER TO TEAMS COLUMN
        //jTable1.getColumnModel().getColumn(0).setCellRenderer(new ButtonRenderer());
        //SET CUSTOM EDITOR TO TEAMS COLUMN
        //jTable1.getColumnModel().getColumn(0).setCellEditor(new ButtonEditor(new JTextField()));
        //ButtonColumn buttonColumn = new ButtonColumn(this, jTable1, 0);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.setSelectionModel(new ForcedListSelectionModel());

        return model;
    }

    private void dialogError(String mensaje) {
        JOptionPane.showMessageDialog(new JFrame(),
                mensaje,
                "ERROR",
                JOptionPane.ERROR_MESSAGE);
    }

    public class ForcedListSelectionModel extends DefaultListSelectionModel {

        public ForcedListSelectionModel() {
            setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        }

        @Override
        public void clearSelection() {
        }

        @Override
        public void removeSelectionInterval(int index0, int index1) {
        }
    }

    public Object getObject() {
        return object;
    }

    public void setObject(Object object) {
        if (this.tipo.equals(ApplicationConstant.VEN)) {
            papa.setVendedorModel((VendedorModel) object);
        } else if (this.tipo.equals(ApplicationConstant.CLI)) {
            papa.setClienteModel((ClienteModel) object);
        } else if (this.tipo.equals(ApplicationConstant.MES)) {
            papa.setMesaModel((MesaModel) object);
        } else if (this.tipo.equals(ApplicationConstant.PED)) {
            papa.setPedidoCabeceraModel((PedidoCabeceraModel) object);
        }
        //this.papa.setEnabled(true);
        this.object = object;
    }
}
