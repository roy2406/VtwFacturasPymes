/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package py.com.cosmesoft.vtwfacturaspymes.view;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import py.com.cosmesoft.vtwfacturaspymes.dto.UsuarioModel;
import py.com.cosmesoft.vtwfacturaspymes.util.ApplicationConstant;
import py.com.cosmesoft.vtwfacturaspymes.util.RSA;
import py.com.cosmesoft.vtwfacturaspymes.client.SerieClient;
import py.com.cosmesoft.vtwfacturaspymes.client.UsuarioClient;

/**
 *
 * @author usuario
 */
public class JFrameLogin extends javax.swing.JFrame {

    /**
     * Creates new form JFrameLogin
     */
    private UsuarioModel usuarioModel;
    private JFrameForm jFrameForm;
    private static final int tamPrimo = 16; //Tama√±o actual de primos actualmente utilizados para las claves

    public JFrameLogin(JFrameForm jFrameForm) {
        this.jFrameForm = jFrameForm;
        //setLocation(400, 100);
        ImageIcon img = new ImageIcon(ApplicationConstant.CARPETA_IMAGENES + "\\logoSantafe.png");
        setIconImage(img.getImage());
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPasswordField1 = new javax.swing.JPasswordField();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Log in");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        this.getRootPane().setDefaultButton(jButton1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPasswordField1, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                            .addComponent(jTextField1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(jButton1)))
                .addContainerGap(146, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(89, Short.MAX_VALUE)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(jButton1)
                .addGap(81, 81, 81))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        login();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    private void login() {
        try {
            //usuarioModel = UsuarioClient.recibirCliente(jTextField1.getText());
            //String psswrd = new String(jPasswordField1.getPassword());
            usuarioModel = UsuarioClient.recibirCliente("gdb");
            String psswrd = "dominbla82";
            if (desencriptar(usuarioModel.getClave()).equals(psswrd)) {
                jFrameForm.setVisible(true);
                jFrameForm.setUsuarioLogueado(usuarioModel);
                jFrameForm.setSeries(getSeries());
                this.dispose();
            } else {
                dialogError("Usuario y/o password incorrectos.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            dialogError("Ocurrio un error.");
        }
    }

    private static void dialogError(String msj) {
        JOptionPane.showMessageDialog(new JFrame(),
                msj,
                "ERROR",
                JOptionPane.ERROR_MESSAGE);
    }

    private String encriptar(String clave) {
        if (clave == null) {
            return null;
        }
        RSA rsa = new RSA(tamPrimo);
        BigInteger[] encriptado = rsa.encriptar(clave);
        String texto = "";
        for (BigInteger nro : encriptado) {
            texto += nro.toString() + "-";
        }
        texto += rsa.getD().toString();
        texto += "-" + rsa.getN().toString();
        return texto;
    }

    public String desencriptar(String clave) {
        /*
         * Se desencripta la clave almacena en la BD antes de retornarla
         */
        if (clave == null) {
            return null;
        }
        if (clave.isEmpty()) {
            return clave;
        }
        StringTokenizer tokenizer = new StringTokenizer(clave, "-");
        BigInteger[] password = new BigInteger[tokenizer.countTokens() - 2];
        for (int i = 0; i < password.length; i++) {
            password[i] = new BigInteger(tokenizer.nextToken());
        }
        BigInteger d = new BigInteger(tokenizer.nextToken());
        BigInteger n = new BigInteger(tokenizer.nextToken());
        RSA rsa = new RSA(tamPrimo, d, n);
        return rsa.desencriptar(password);
    }

    private String[] getSeries() {
        String[] seriesArray = new String[0];
        List<String> seriesList = new ArrayList<String>();
        try {
            seriesList = SerieClient.recibirSeries(usuarioModel.getCodUsuario());
            seriesArray = new String[seriesList.size()];
            for (int i = 0; i < seriesArray.length; i++) {
                seriesArray[i] = seriesList.get(i);
            }
        } catch (Exception e) {
            e.printStackTrace();
            dialogError("Ocurrio un error al momento de traer las Series.");
        }
        return seriesArray;
    }
}
